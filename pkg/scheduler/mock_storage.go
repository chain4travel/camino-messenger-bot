// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chain4travel/camino-messenger-bot/pkg/scheduler (interfaces: Storage)
//
// Generated by this command:
//
//	mockgen -package=scheduler -destination=pkg/scheduler/mock_storage.go github.com/chain4travel/camino-messenger-bot/pkg/scheduler Storage
//

// Package scheduler is a generated GoMock package.
package scheduler

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Abort mocks base method.
func (m *MockStorage) Abort(arg0 Session) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Abort", arg0)
}

// Abort indicates an expected call of Abort.
func (mr *MockStorageMockRecorder) Abort(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abort", reflect.TypeOf((*MockStorage)(nil).Abort), arg0)
}

// Commit mocks base method.
func (m *MockStorage) Commit(arg0 Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockStorageMockRecorder) Commit(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockStorage)(nil).Commit), arg0)
}

// GetAllJobs mocks base method.
func (m *MockStorage) GetAllJobs(arg0 context.Context, arg1 Session) ([]*Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllJobs", arg0, arg1)
	ret0, _ := ret[0].([]*Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllJobs indicates an expected call of GetAllJobs.
func (mr *MockStorageMockRecorder) GetAllJobs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllJobs", reflect.TypeOf((*MockStorage)(nil).GetAllJobs), arg0, arg1)
}

// GetJobByName mocks base method.
func (m *MockStorage) GetJobByName(arg0 context.Context, arg1 Session, arg2 string) (*Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobByName", arg0, arg1, arg2)
	ret0, _ := ret[0].(*Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobByName indicates an expected call of GetJobByName.
func (mr *MockStorageMockRecorder) GetJobByName(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobByName", reflect.TypeOf((*MockStorage)(nil).GetJobByName), arg0, arg1, arg2)
}

// NewSession mocks base method.
func (m *MockStorage) NewSession(arg0 context.Context) (Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSession", arg0)
	ret0, _ := ret[0].(Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSession indicates an expected call of NewSession.
func (mr *MockStorageMockRecorder) NewSession(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSession", reflect.TypeOf((*MockStorage)(nil).NewSession), arg0)
}

// UpsertJob mocks base method.
func (m *MockStorage) UpsertJob(arg0 context.Context, arg1 Session, arg2 *Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertJob", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertJob indicates an expected call of UpsertJob.
func (mr *MockStorageMockRecorder) UpsertJob(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertJob", reflect.TypeOf((*MockStorage)(nil).UpsertJob), arg0, arg1, arg2)
}
