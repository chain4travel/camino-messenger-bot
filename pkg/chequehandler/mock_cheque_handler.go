// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chain4travel/camino-messenger-bot/pkg/chequehandler (interfaces: ChequeHandler)
//
// Generated by this command:
//
//	mockgen -package=chequehandler -destination=pkg/chequehandler/mock_cheque_handler.go github.com/chain4travel/camino-messenger-bot/pkg/chequehandler ChequeHandler
//

// Package chequehandler is a generated GoMock package.
package chequehandler

import (
	context "context"
	big "math/big"
	reflect "reflect"

	cheques "github.com/chain4travel/camino-messenger-bot/pkg/cheques"
	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockChequeHandler is a mock of ChequeHandler interface.
type MockChequeHandler struct {
	ctrl     *gomock.Controller
	recorder *MockChequeHandlerMockRecorder
}

// MockChequeHandlerMockRecorder is the mock recorder for MockChequeHandler.
type MockChequeHandlerMockRecorder struct {
	mock *MockChequeHandler
}

// NewMockChequeHandler creates a new mock instance.
func NewMockChequeHandler(ctrl *gomock.Controller) *MockChequeHandler {
	mock := &MockChequeHandler{ctrl: ctrl}
	mock.recorder = &MockChequeHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChequeHandler) EXPECT() *MockChequeHandlerMockRecorder {
	return m.recorder
}

// CashIn mocks base method.
func (m *MockChequeHandler) CashIn(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CashIn", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CashIn indicates an expected call of CashIn.
func (mr *MockChequeHandlerMockRecorder) CashIn(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CashIn", reflect.TypeOf((*MockChequeHandler)(nil).CashIn), arg0)
}

// CheckCashInStatus mocks base method.
func (m *MockChequeHandler) CheckCashInStatus(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCashInStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckCashInStatus indicates an expected call of CheckCashInStatus.
func (mr *MockChequeHandlerMockRecorder) CheckCashInStatus(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCashInStatus", reflect.TypeOf((*MockChequeHandler)(nil).CheckCashInStatus), arg0)
}

// IssueCheque mocks base method.
func (m *MockChequeHandler) IssueCheque(arg0 context.Context, arg1, arg2, arg3 common.Address, arg4 *big.Int) (*cheques.SignedCheque, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueCheque", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*cheques.SignedCheque)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueCheque indicates an expected call of IssueCheque.
func (mr *MockChequeHandlerMockRecorder) IssueCheque(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueCheque", reflect.TypeOf((*MockChequeHandler)(nil).IssueCheque), arg0, arg1, arg2, arg3, arg4)
}

// VerifyCheque mocks base method.
func (m *MockChequeHandler) VerifyCheque(arg0 context.Context, arg1 *cheques.SignedCheque, arg2 common.Address, arg3 *big.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyCheque", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyCheque indicates an expected call of VerifyCheque.
func (mr *MockChequeHandlerMockRecorder) VerifyCheque(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyCheque", reflect.TypeOf((*MockChequeHandler)(nil).VerifyCheque), arg0, arg1, arg2, arg3)
}
