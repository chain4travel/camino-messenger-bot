// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chain4travel/camino-messenger-bot/pkg/chequehandler (interfaces: Storage)
//
// Generated by this command:
//
//	mockgen -package=chequehandler -destination=pkg/chequehandler/mock_storage.go github.com/chain4travel/camino-messenger-bot/pkg/chequehandler Storage
//

// Package chequehandler is a generated GoMock package.
package chequehandler

import (
	context "context"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Abort mocks base method.
func (m *MockStorage) Abort(arg0 Session) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Abort", arg0)
}

// Abort indicates an expected call of Abort.
func (mr *MockStorageMockRecorder) Abort(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abort", reflect.TypeOf((*MockStorage)(nil).Abort), arg0)
}

// Commit mocks base method.
func (m *MockStorage) Commit(arg0 Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockStorageMockRecorder) Commit(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockStorage)(nil).Commit), arg0)
}

// GetChequeRecord mocks base method.
func (m *MockStorage) GetChequeRecord(arg0 context.Context, arg1 Session, arg2 common.Hash) (*ChequeRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChequeRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(*ChequeRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChequeRecord indicates an expected call of GetChequeRecord.
func (mr *MockStorageMockRecorder) GetChequeRecord(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChequeRecord", reflect.TypeOf((*MockStorage)(nil).GetChequeRecord), arg0, arg1, arg2)
}

// GetChequeRecordByTxID mocks base method.
func (m *MockStorage) GetChequeRecordByTxID(arg0 context.Context, arg1 Session, arg2 common.Hash) (*ChequeRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChequeRecordByTxID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*ChequeRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChequeRecordByTxID indicates an expected call of GetChequeRecordByTxID.
func (mr *MockStorageMockRecorder) GetChequeRecordByTxID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChequeRecordByTxID", reflect.TypeOf((*MockStorage)(nil).GetChequeRecordByTxID), arg0, arg1, arg2)
}

// GetChequeRecordsWithPendingTxs mocks base method.
func (m *MockStorage) GetChequeRecordsWithPendingTxs(arg0 context.Context, arg1 Session) ([]*ChequeRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChequeRecordsWithPendingTxs", arg0, arg1)
	ret0, _ := ret[0].([]*ChequeRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChequeRecordsWithPendingTxs indicates an expected call of GetChequeRecordsWithPendingTxs.
func (mr *MockStorageMockRecorder) GetChequeRecordsWithPendingTxs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChequeRecordsWithPendingTxs", reflect.TypeOf((*MockStorage)(nil).GetChequeRecordsWithPendingTxs), arg0, arg1)
}

// GetIssuedChequeRecord mocks base method.
func (m *MockStorage) GetIssuedChequeRecord(arg0 context.Context, arg1 Session, arg2 common.Hash) (*IssuedChequeRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuedChequeRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(*IssuedChequeRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuedChequeRecord indicates an expected call of GetIssuedChequeRecord.
func (mr *MockStorageMockRecorder) GetIssuedChequeRecord(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuedChequeRecord", reflect.TypeOf((*MockStorage)(nil).GetIssuedChequeRecord), arg0, arg1, arg2)
}

// GetNotCashedChequeRecords mocks base method.
func (m *MockStorage) GetNotCashedChequeRecords(arg0 context.Context, arg1 Session) ([]*ChequeRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotCashedChequeRecords", arg0, arg1)
	ret0, _ := ret[0].([]*ChequeRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotCashedChequeRecords indicates an expected call of GetNotCashedChequeRecords.
func (mr *MockStorageMockRecorder) GetNotCashedChequeRecords(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotCashedChequeRecords", reflect.TypeOf((*MockStorage)(nil).GetNotCashedChequeRecords), arg0, arg1)
}

// NewSession mocks base method.
func (m *MockStorage) NewSession(arg0 context.Context) (Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSession", arg0)
	ret0, _ := ret[0].(Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSession indicates an expected call of NewSession.
func (mr *MockStorageMockRecorder) NewSession(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSession", reflect.TypeOf((*MockStorage)(nil).NewSession), arg0)
}

// UpsertChequeRecord mocks base method.
func (m *MockStorage) UpsertChequeRecord(arg0 context.Context, arg1 Session, arg2 *ChequeRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertChequeRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertChequeRecord indicates an expected call of UpsertChequeRecord.
func (mr *MockStorageMockRecorder) UpsertChequeRecord(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertChequeRecord", reflect.TypeOf((*MockStorage)(nil).UpsertChequeRecord), arg0, arg1, arg2)
}

// UpsertIssuedChequeRecord mocks base method.
func (m *MockStorage) UpsertIssuedChequeRecord(arg0 context.Context, arg1 Session, arg2 *IssuedChequeRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertIssuedChequeRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertIssuedChequeRecord indicates an expected call of UpsertIssuedChequeRecord.
func (mr *MockStorageMockRecorder) UpsertIssuedChequeRecord(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertIssuedChequeRecord", reflect.TypeOf((*MockStorage)(nil).UpsertIssuedChequeRecord), arg0, arg1, arg2)
}
