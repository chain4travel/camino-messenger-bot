// Code generated by MockGen. DO NOT EDIT.
// Source: buf.build/gen/go/chain4travel/camino-messenger-protocol/grpc/go/cmp/services/activity/v2/activityv2grpc (interfaces: ActivityProductListServiceClient)
//
// Generated by this command:
//
//	mockgen -package=messaging -destination=internal/messaging/mock_list_grpc.pb.go buf.build/gen/go/chain4travel/camino-messenger-protocol/grpc/go/cmp/services/activity/v2/activityv2grpc ActivityProductListServiceClient
//

// Package messaging is a generated GoMock package.
package messaging

import (
	context "context"
	reflect "reflect"

	activityv2 "buf.build/gen/go/chain4travel/camino-messenger-protocol/protocolbuffers/go/cmp/services/activity/v2"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockActivityProductListServiceClient is a mock of ActivityProductListServiceClient interface.
type MockActivityProductListServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockActivityProductListServiceClientMockRecorder
}

// MockActivityProductListServiceClientMockRecorder is the mock recorder for MockActivityProductListServiceClient.
type MockActivityProductListServiceClientMockRecorder struct {
	mock *MockActivityProductListServiceClient
}

// NewMockActivityProductListServiceClient creates a new mock instance.
func NewMockActivityProductListServiceClient(ctrl *gomock.Controller) *MockActivityProductListServiceClient {
	mock := &MockActivityProductListServiceClient{ctrl: ctrl}
	mock.recorder = &MockActivityProductListServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActivityProductListServiceClient) EXPECT() *MockActivityProductListServiceClientMockRecorder {
	return m.recorder
}

// ActivityProductList mocks base method.
func (m *MockActivityProductListServiceClient) ActivityProductList(arg0 context.Context, arg1 *activityv2.ActivityProductListRequest, arg2 ...grpc.CallOption) (*activityv2.ActivityProductListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActivityProductList", varargs...)
	ret0, _ := ret[0].(*activityv2.ActivityProductListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivityProductList indicates an expected call of ActivityProductList.
func (mr *MockActivityProductListServiceClientMockRecorder) ActivityProductList(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivityProductList", reflect.TypeOf((*MockActivityProductListServiceClient)(nil).ActivityProductList), varargs...)
}
