// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chain4travel/camino-messenger-bot/internal/messaging (interfaces: Messenger)
//
// Generated by this command:
//
//	mockgen -package=messaging -destination=internal/messaging/mock_messenger.go github.com/chain4travel/camino-messenger-bot/internal/messaging Messenger
//

// Package messaging is a generated GoMock package.
package messaging

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	id "maunium.net/go/mautrix/id"
)

// MockMessenger is a mock of Messenger interface.
type MockMessenger struct {
	ctrl     *gomock.Controller
	recorder *MockMessengerMockRecorder
}

// MockMessengerMockRecorder is the mock recorder for MockMessenger.
type MockMessengerMockRecorder struct {
	mock *MockMessenger
}

// NewMockMessenger creates a new mock instance.
func NewMockMessenger(ctrl *gomock.Controller) *MockMessenger {
	mock := &MockMessenger{ctrl: ctrl}
	mock.recorder = &MockMessengerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessenger) EXPECT() *MockMessengerMockRecorder {
	return m.recorder
}

// Checkpoint mocks base method.
func (m *MockMessenger) Checkpoint() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

// Checkpoint indicates an expected call of Checkpoint.
func (mr *MockMessengerMockRecorder) Checkpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkpoint", reflect.TypeOf((*MockMessenger)(nil).Checkpoint))
}

// Inbound mocks base method.
func (m *MockMessenger) Inbound() chan Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inbound")
	ret0, _ := ret[0].(chan Message)
	return ret0
}

// Inbound indicates an expected call of Inbound.
func (mr *MockMessengerMockRecorder) Inbound() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inbound", reflect.TypeOf((*MockMessenger)(nil).Inbound))
}

// SendAsync mocks base method.
func (m *MockMessenger) SendAsync(arg0 context.Context, arg1 Message, arg2 id.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAsync", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAsync indicates an expected call of SendAsync.
func (mr *MockMessengerMockRecorder) SendAsync(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAsync", reflect.TypeOf((*MockMessenger)(nil).SendAsync), arg0, arg1, arg2)
}

// StartReceiver mocks base method.
func (m *MockMessenger) StartReceiver() (id.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartReceiver")
	ret0, _ := ret[0].(id.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartReceiver indicates an expected call of StartReceiver.
func (mr *MockMessengerMockRecorder) StartReceiver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReceiver", reflect.TypeOf((*MockMessenger)(nil).StartReceiver))
}

// StopReceiver mocks base method.
func (m *MockMessenger) StopReceiver() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopReceiver")
	ret0, _ := ret[0].(error)
	return ret0
}

// StopReceiver indicates an expected call of StopReceiver.
func (mr *MockMessengerMockRecorder) StopReceiver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopReceiver", reflect.TypeOf((*MockMessenger)(nil).StopReceiver))
}
