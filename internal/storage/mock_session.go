// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chain4travel/camino-messenger-bot/internal/storage (interfaces: Session)
//
// Generated by this command:
//
//	mockgen -package=storage -destination=internal/storage/mock_session.go github.com/chain4travel/camino-messenger-bot/internal/storage Session
//

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	reflect "reflect"

	models "github.com/chain4travel/camino-messenger-bot/internal/models"
	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// Abort mocks base method.
func (m *MockSession) Abort() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Abort")
}

// Abort indicates an expected call of Abort.
func (mr *MockSessionMockRecorder) Abort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abort", reflect.TypeOf((*MockSession)(nil).Abort))
}

// Commit mocks base method.
func (m *MockSession) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockSessionMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockSession)(nil).Commit))
}

// GetAllJobs mocks base method.
func (m *MockSession) GetAllJobs(arg0 context.Context) ([]*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllJobs", arg0)
	ret0, _ := ret[0].([]*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllJobs indicates an expected call of GetAllJobs.
func (mr *MockSessionMockRecorder) GetAllJobs(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllJobs", reflect.TypeOf((*MockSession)(nil).GetAllJobs), arg0)
}

// GetChequeRecord mocks base method.
func (m *MockSession) GetChequeRecord(arg0 context.Context, arg1 common.Hash) (*models.ChequeRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChequeRecord", arg0, arg1)
	ret0, _ := ret[0].(*models.ChequeRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChequeRecord indicates an expected call of GetChequeRecord.
func (mr *MockSessionMockRecorder) GetChequeRecord(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChequeRecord", reflect.TypeOf((*MockSession)(nil).GetChequeRecord), arg0, arg1)
}

// GetChequeRecordByTxID mocks base method.
func (m *MockSession) GetChequeRecordByTxID(arg0 context.Context, arg1 common.Hash) (*models.ChequeRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChequeRecordByTxID", arg0, arg1)
	ret0, _ := ret[0].(*models.ChequeRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChequeRecordByTxID indicates an expected call of GetChequeRecordByTxID.
func (mr *MockSessionMockRecorder) GetChequeRecordByTxID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChequeRecordByTxID", reflect.TypeOf((*MockSession)(nil).GetChequeRecordByTxID), arg0, arg1)
}

// GetChequeRecordsWithPendingTxs mocks base method.
func (m *MockSession) GetChequeRecordsWithPendingTxs(arg0 context.Context) ([]*models.ChequeRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChequeRecordsWithPendingTxs", arg0)
	ret0, _ := ret[0].([]*models.ChequeRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChequeRecordsWithPendingTxs indicates an expected call of GetChequeRecordsWithPendingTxs.
func (mr *MockSessionMockRecorder) GetChequeRecordsWithPendingTxs(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChequeRecordsWithPendingTxs", reflect.TypeOf((*MockSession)(nil).GetChequeRecordsWithPendingTxs), arg0)
}

// GetJobByName mocks base method.
func (m *MockSession) GetJobByName(arg0 context.Context, arg1 string) (*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobByName", arg0, arg1)
	ret0, _ := ret[0].(*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobByName indicates an expected call of GetJobByName.
func (mr *MockSessionMockRecorder) GetJobByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobByName", reflect.TypeOf((*MockSession)(nil).GetJobByName), arg0, arg1)
}

// GetNotCashedChequeRecords mocks base method.
func (m *MockSession) GetNotCashedChequeRecords(arg0 context.Context) ([]*models.ChequeRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotCashedChequeRecords", arg0)
	ret0, _ := ret[0].([]*models.ChequeRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotCashedChequeRecords indicates an expected call of GetNotCashedChequeRecords.
func (mr *MockSessionMockRecorder) GetNotCashedChequeRecords(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotCashedChequeRecords", reflect.TypeOf((*MockSession)(nil).GetNotCashedChequeRecords), arg0)
}

// UpsertChequeRecord mocks base method.
func (m *MockSession) UpsertChequeRecord(arg0 context.Context, arg1 *models.ChequeRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertChequeRecord", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertChequeRecord indicates an expected call of UpsertChequeRecord.
func (mr *MockSessionMockRecorder) UpsertChequeRecord(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertChequeRecord", reflect.TypeOf((*MockSession)(nil).UpsertChequeRecord), arg0, arg1)
}

// UpsertJob mocks base method.
func (m *MockSession) UpsertJob(arg0 context.Context, arg1 *models.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertJob", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertJob indicates an expected call of UpsertJob.
func (mr *MockSessionMockRecorder) UpsertJob(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertJob", reflect.TypeOf((*MockSession)(nil).UpsertJob), arg0, arg1)
}
