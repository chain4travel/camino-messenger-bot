// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chain4travel/camino-messenger-bot/internal/compression (interfaces: Decompressor)
//
// Generated by this command:
//
//	mockgen -package=compression -destination=internal/compression/mock_decompress.go github.com/chain4travel/camino-messenger-bot/internal/compression Decompressor
//

// Package compression is a generated GoMock package.
package compression

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDecompressor is a mock of Decompressor interface.
type MockDecompressor struct {
	ctrl     *gomock.Controller
	recorder *MockDecompressorMockRecorder
}

// MockDecompressorMockRecorder is the mock recorder for MockDecompressor.
type MockDecompressorMockRecorder struct {
	mock *MockDecompressor
}

// NewMockDecompressor creates a new mock instance.
func NewMockDecompressor(ctrl *gomock.Controller) *MockDecompressor {
	mock := &MockDecompressor{ctrl: ctrl}
	mock.recorder = &MockDecompressorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDecompressor) EXPECT() *MockDecompressorMockRecorder {
	return m.recorder
}

// Decompress mocks base method.
func (m *MockDecompressor) Decompress(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decompress", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decompress indicates an expected call of Decompress.
func (mr *MockDecompressorMockRecorder) Decompress(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decompress", reflect.TypeOf((*MockDecompressor)(nil).Decompress), arg0)
}
